---
date: 2016-12-01
author: matousjobanek
---

You probably know the cases when you have to build a project before running another one or before running tests to use a created archive. "Maven Importer":https://github.com/shrinkwrap/resolver#maven-importer provided by ShrinkWrap Resolver can partially help you with it - it compiles the classes and collects dependencies from the @pom.xml@ file. However, you cannot use Maven plugins, profiles or some variables as it doesn't do the real Maven build - it just tries to simulate it. You can definitely imagine a situation that you don't have any Maven binary installed in your local repository or that you need different Maven version for one specific build. That's why ShrinkWrap Resolver introduces a new feature: Embedded Maven.

h2. Embedded Maven

Embedded Maven provides you a possibility to invoke a Maven build for a selected project directly from your Java code. Internally, it uses "maven-invoker":http://maven.apache.org/shared/maven-invoker/ and mainly the classes "Invoker":https://maven.apache.org/components/shared/maven-invoker/apidocs/org/apache/maven/shared/invoker/Invoker.html and "InvocationRequest":https://maven.apache.org/components/shared/maven-invoker/apidocs/org/apache/maven/shared/invoker/InvocationRequest.html, which basically offers the functionality of running Maven builds directly from the Java code.
So now there can arise some questions: Why should I use Embedded Maven? What are the benefits?
There are bunch of functions added to make the usage more user friendly. The most significant additional functions are:

* downloading and using Maven binaries that the user desires

* uncluttered API (you can write code that runs either trivial or complex builds in one single line)

* additional methods & functions (eg. ignoring build failures or making the build output quiet)

* Java class representing a built project

* easy way of getting a ShrinkWrap Archive created by the build, so you can further enrich it if needed

* automatic functions such as skipping tests and formatting a build output

* possibility to use one's @Invoker@ and @InvocationRequest@ instances

* and more ...


h3. How can I use it?

Your starting point is a class "EmbeddedMaven":https://github.com/shrinkwrap/resolver/blob/3.0.0-alpha-2/maven/api-maven-embedded/src/main/java/org/jboss/shrinkwrap/resolver/api/maven/embedded/EmbeddedMaven.java which offers you three methods. At this point you have to decide which approach of setting Maven build options you want to follow.


h4. 1) ShrinkWrap Resolver API

<b>Recommended</b>
You can use ShrinkWrap Resolver API that offers additional features in more comfortable but slightly limited way. This approach is linked with these two methods:
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 125%">EmbeddedMaven<span style="color: #666666">.</span><span style="color: #7D9029">forProject</span><span style="color: #666666">(</span>File pomFile<span style="color: #666666">)</span>
EmbeddedMaven<span style="color: #666666">.</span><span style="color: #7D9029">forProject</span><span style="color: #666666">(</span>String pomFile<span style="color: #666666">)</span>
</pre></div>where you have to specify a POM file of a project you want to build.

Why it is limited? Contrary to second approach or to the pure @maven-invoker@:

<ul>
    <li>you cannot set neither output handler nor error handler because it is already set by ShrinkWrap Resolver. On the other hand, it has three positive effects:
                <b style="margin-left: 40px;">I)</b> the output is automatically formatted (with a prefix @->@ to make the output visibly separated)
                <b style="margin-left: 40px;">II)</b> after the completion, the build output is accessible using method "BuiltProject#getMavenLog()":https://github.com/shrinkwrap/resolver/blob/3.0.0-alpha-2/maven/api-maven-embedded/src/main/java/org/jboss/shrinkwrap/resolver/api/maven/embedded/BuiltProject.java#L92
                <b style="margin-left: 40px;">III)</b> you can easily suppress the build output using method "ConfigurationStage#setQuiet()":https://github.com/shrinkwrap/resolver/blob/3.0.0-alpha-2/maven/api-maven-embedded/src/main/java/org/jboss/shrinkwrap/resolver/api/maven/embedded/pom/equipped/ConfigurationStage.java#L338
    </li>
    <li> you cannot set a project you want to build by setting base directory and a file name separately. </li>
    <li> there are no methods for setting Maven home and binaries, because it is set by ShrinkWrap Resolver itself. </li>
</ul>


h4. 2) Using your own Maven Invoker

With the second approach, you can use your own @Invoker@ and @InvocationRequest@ instances. If you use it, then it is expected that all settings are done by yourself so no automatic features are provided by ShrinkWrap Resolver. This approach is linked with the method:
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 125%">EmbeddedMaven<span style="color: #666666">.</span><span style="color: #7D9029">withMavenInvokerSet</span><span style="color: #666666">(</span>InvocationRequest request<span style="color: #666666">,</span> Invoker invoker<span style="color: #666666">)</span>
</pre></div>


Why it is less comfortable? You can see the differences in these two test cases that does completely the same thing but using different approaches: "first approach":https://github.com/shrinkwrap/resolver/blob/3.0.0-alpha-2/maven/impl-maven-embedded/src/test/java/org/jboss/shrinkwrap/resolver/impl/maven/embedded/pom/equipped/PomEquippedEmbeddedMavenForJarSampleTestCase.java "second approach":https://github.com/shrinkwrap/resolver/blob/3.0.0-alpha-2/maven/impl-maven-embedded/src/test/java/org/jboss/shrinkwrap/resolver/impl/maven/embedded/invoker/equipped/InvokerEquippedEmbeddedMavenForJarSampleTestCase.java
These are the disadvantages:

* methods such as @setGoals@ and @setProfiles@ accept only a list of string.
* you have to set the property @skipTests@ for each @InvocationRequest@ if you don't want to run the tests.
* you don't have an access to the Maven build output after the build completion
* the build output is not automatically formatted and it cannot be easily suppressed
* the methods for setting Maven home or binaries are accessible in @Invoker@ object, but it is advised not to use them as the Maven home is used by ShrinkWrap Resolver
<br/>

h3. Downloading Maven binaries

In case when there is no Maven binaries installed on the machine or when another Maven version is needed for some specific build, you can ask ShrinkWrap Resolver to download the specific version from the Apache web pages and use it. For this purpose there is a method:
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 125%">EmbeddedMaven<span style="color: #666666">.</span><span style="color: #7D9029">forProject</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;path/to/pom.xml&quot;</span><span style="color: #666666">).</span><span style="color: #7D9029">useMaven3Version</span><span style="color: #666666">(</span>String version<span style="color: #666666">)</span>
</pre></div>



where the desired version is expected (eg: <code style='color:#000000;background:#ffffff;'>useMaven3Version("3.3.9")</code>). This version is downloaded from Apache web pages and the downloaded zip is cached in a directory <code style='color:#000000;background:#ffffff;'>$HOME/.arquillian/resolver/maven/</code> to not download it over and over again. Zip file is extracted in
<code style='color:#000000;background:#ffffff;'>${project.directory}/target/resolver-maven/${generated_UUID}</code>
and the path to the extracted binaries is set as Maven home applicable for the build.

There are three more methods for setting Maven binaries that should be used for the build.
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 125%">EmbeddedMaven<span style="color: #666666">.</span><span style="color: #7D9029">forProject</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;path/to/pom.xml&quot;</span><span style="color: #666666">).</span><span style="color: #7D9029">useDistribution</span><span style="color: #666666">(</span>URL mavenDist<span style="color: #666666">,</span> <span style="color: #B00040">boolean</span> useCache<span style="color: #666666">)</span>
</pre></div>

where you need to specify a URL the distribution should be downloaded from. You should also specify if the cache directory should be used. If <code style='color:#000000;background:#ffffff;'>useCache</code> is @false@, then the zip file is downloaded into <code style='color:#000000;background:#ffffff;'>${project.directory}/target/resolver-maven/downloaded</code>.

Next method
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 125%">EmbeddedMaven<span style="color: #666666">.</span><span style="color: #7D9029">forProject</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;path/to/pom.xml&quot;</span><span style="color: #666666">).</span><span style="color: #7D9029">useInstallation</span><span style="color: #666666">(</span>File mavenHome<span style="color: #666666">)</span>
</pre></div>

uses Maven installation located on the given path.

Last method:
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 125%">EmbeddedMaven<span style="color: #666666">.</span><span style="color: #7D9029">forProject</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;path/to/pom.xml&quot;</span><span style="color: #666666">).</span><span style="color: #7D9029">useDefaultDistribution</span><span style="color: #666666">()</span>
</pre></div>


basically does nothing. It just says that the default Maven installation that is on your @PATH@ should be used. It is same as you wouldn't use any of these methods.


h3. Explanation of additional features:

<b>Skipping tests</b>
Using ShrinkWrap Resolver API approach, there is no need to set the @skipTests@ property if you don't want to run any test as it is set automatically. If you still want to run tests, then you can use method: "ConfigurationStage#skipTests(false)":https://github.com/shrinkwrap/resolver/blob/3.0.0-alpha-2/maven/api-maven-embedded/src/main/java/org/jboss/shrinkwrap/resolver/api/maven/embedded/pom/equipped/ConfigurationStage.java#L155

<b>Ignoring failures</b>
If the Maven build fails, then an @IllegalStateException@ is thrown by default. If you use method "BuildStage#ignoreFailure()":https://github.com/shrinkwrap/resolver/blob/3.0.0-alpha-2/maven/api-maven-embedded/src/main/java/org/jboss/shrinkwrap/resolver/api/maven/embedded/BuildStage.java#L45, then failures of the Maven build is ignored and a BuiltProject instance with a non-zero value stored in mavenBuildExitCode variable is returned.


h3. BuiltProject

"BuiltProject":https://github.com/shrinkwrap/resolver/blob/3.0.0-alpha-2/maven/api-maven-embedded/src/main/java/org/jboss/shrinkwrap/resolver/api/maven/embedded/BuiltProject.java is a Java class that represents a built project. An instance of this class is returned by the method <code style='color:#000000;background:#ffffff;'>build()</code> when the Maven build is completed. The most useful method is probably:
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 125%">builtProject<span style="color: #666666">.</span><span style="color: #7D9029">getDefaultBuiltArchive</span><span style="color: #666666">()</span>
</pre></div>


that returns an archive with a default name that was created by the Maven build. As a "default archive name" is understood:

* either combination of artifactId + version + packaging suffix (eg.
* or a finalName set in @<build>@ section of project's POM file + packaging suffix

if no archive with a corresponding name is found, then @null@ is returned. @null@ is also returned for the projects with <code style='color:#000000;background:#ffffff;'>packaging=pom</code> as it is usually a parent project with a set of modules. To get all modules that are specified use the method:
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 125%">builtProject<span style="color: #666666">.</span><span style="color: #7D9029">getModules</span><span style="color: #666666">()</span>
</pre></div>


which returns list of BuiltProject instances. If you know the name (string within an element @<module>@ in the parent's POM file) of a module you are interested in, you can use:
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 125%">builtProject<span style="color: #666666">.</span><span style="color: #7D9029">getModule</span><span style="color: #666666">(</span>String moduleName<span style="color: #666666">)</span>
</pre></div>


There are several other useful methods provided by this Java class. For more information see "BuiltProject":https://github.com/shrinkwrap/resolver/blob/3.0.0-alpha-2/maven/api-maven-embedded/src/main/java/org/jboss/shrinkwrap/resolver/api/maven/embedded/BuiltProject.java


h3. Examples

First example is just packaging a project and getting the default archive out of it:
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 125%">EmbeddedMaven<span style="color: #666666">.</span><span style="color: #7D9029">forProject</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;some/pom.xml&quot;</span><span style="color: #666666">).</span><span style="color: #7D9029">setGoals</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;package&quot;</span><span style="color: #666666">).</span><span style="color: #7D9029">build</span><span style="color: #666666">().</span><span style="color: #7D9029">getDefaultBuiltArchive</span><span style="color: #666666">();</span>
</pre></div>
Then let's say that we want to build some project using goals @clean@ and @package@ and with activated profile @production@:
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 80%">BuiltProject builtProject <span style="color: #666666">=</span> EmbeddedMaven<span style="color: #666666">.</span><span style="color: #7D9029">forProject</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;path/to/pom.xml&quot;</span><span style="color: #666666">)</span>
	                                 <span style="color: #666666">.</span><span style="color: #7D9029">setGoals</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;clean&quot;</span><span style="color: #666666">,</span> <span style="color: #BA2121">&quot;package&quot;</span><span style="color: #666666">)</span>
	                                 <span style="color: #666666">.</span><span style="color: #7D9029">setProfiles</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;production&quot;</span><span style="color: #666666">)</span>
	                                 <span style="color: #666666">.</span><span style="color: #7D9029">build</span><span style="color: #666666">();</span>
</pre></div>


Then you can get the default archive:
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 125%"> Archive archive <span style="color: #666666">=</span> builtProject<span style="color: #666666">.</span><span style="color: #7D9029">getDefaultBuiltArchive</span><span style="color: #666666">();</span>
</pre></div>

or all Java archives, that are contained in the build directory:
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 125%"> List javaArchives <span style="color: #666666">=</span> builtProject<span style="color: #666666">.</span><span style="color: #7D9029">getArchives</span><span style="color: #666666">(</span>JavaArchive<span style="color: #666666">.</span><span style="color: #7D9029">class</span><span style="color: #666666">);</span>
</pre></div>
<br/>

Let's say that we want to use Maven 3.1.0 for building a project with a goal @install@ and property <code style='color:#000000;background:#ffffff;'>wildfly=true</code>. We also don't want to display the build output and we want to ignore all possible build failures:
<div style="background: #f8f8f8; overflow:auto;width:auto;"><pre style="margin: 0; line-height: 80%">EmbeddedMaven<span style="color: #666666">.</span><span style="color: #7D9029">forProject</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;path/to/pom.xml&quot;</span><span style="color: #666666">)</span>
             <span style="color: #666666">.</span><span style="color: #7D9029">useMaven3Version</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;3.1.0&quot;</span><span style="color: #666666">)</span>
             <span style="color: #666666">.</span><span style="color: #7D9029">setGoals</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;install&quot;</span><span style="color: #666666">)</span>
             <span style="color: #666666">.</span><span style="color: #7D9029">addProperty</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;wildfly&quot;</span><span style="color: #666666">,</span> <span style="color: #BA2121">&quot;true&quot;</span><span style="color: #666666">)</span>
             <span style="color: #666666">.</span><span style="color: #7D9029">setQuiet</span><span style="color: #666666">()</span>
             <span style="color: #666666">.</span><span style="color: #7D9029">ignoreFailure</span><span style="color: #666666">()</span>
             <span style="color: #666666">.</span><span style="color: #7D9029">build</span><span style="color: #666666">();</span>
</pre></div>


Some additional examples can be found in integration tests "here":https://github.com/shrinkwrap/resolver/tree/3.0.0-alpha-2/maven/impl-maven-embedded/src/test/java/org/jboss/shrinkwrap/resolver/impl/maven/embedded/pom/equipped and "here":https://github.com/shrinkwrap/resolver/tree/3.0.0-alpha-2/maven/impl-maven-embedded/src/test/java/org/jboss/shrinkwrap/resolver/impl/maven/embedded/invoker/equipped.
