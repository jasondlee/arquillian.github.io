---
date: 2015-10-10
---

The Arquillian Universe BOM is a 'Bill of Material' Maven POM file collection that make up a module stack that stretch across the whole Arquillian Universe.

This project aim to fulfill two main requirements:

# Simplify the 'Getting Started' experience
# Unify naming and versions

h3. How do I use it?

Include the following snippet in your POM xml file:

bc(prettify).. <properties>
    <version.arquillian_universe>1.0.0.Alpha1</version.arquillian_universe>
</properties>

<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>org.arquillian</groupId>
            <artifactId>arquillian-universe</artifactId>
            <version>${version.arquillian_universe}</version>
            <scope>import</scope>
            <type>pom</type>
        </dependency>
    </dependencies>
</dependencyManagement>

p. Then include the individual modules as you see fit, by simply depending on the unified pom name:

bc(prettify).. <dependencies>
    <dependency>
        <groupId>org.arquillian.universe</groupId>
        <artifactId>arquillian-junit</artifactId>
        <scope>test</scope>
        <type>pom</type>
    </dependency>
</dependencies>

h3. Which modules are available in 1.0.0.Alpha1?

- <i class="icon-star"></i> JUnit :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-junit</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. The JUnit Container integration.
=:

- <i class="icon-star"></i> JUnit Standalone :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-junit-standalone</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. The JUnit Standalone Container integration.
=:

- <i class="icon-star"></i> TestNG :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-testng</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. The TestNG Container integration.
=:

- <i class="icon-star"></i> TestNG Standalone :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-testng-standalone</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. The TestNG Standalone integration.
=:

- <i class="icon-star"></i> Cuckes in Space :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-cuckes</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Cukes in Space! allows you to deploy and run Cucumber features in the application server of your choice using the Arquillian test framework.
=:

- <i class="icon-star"></i> Arquillian Drone :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-drone</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. The Arquillian Drone provides a simple way how to write functional tests for an application with a web-based user interface. Arquillian Drone brings the power of WebDriver into the Arquillian framework. WebDriver provides a language how to communicate with a browser, like filling the forms, navigating on the pages and validating their content.
=:

- <i class="icon-star"></i> Arquillian Graphene :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-graphene</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Graphene project is designed as set of extensions for Selenium WebDriver project focused on rapid development and usability in Java environment.
=:

- <i class="icon-star"></i> Arquillian Graphene Recorder :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-graphene-recorder</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Browser screenshooter is an extension to Arquillian platform which provides the possibility to take screenshots of your tests. Only browser window is screened. 
=:

- <i class="icon-star"></i> Arquillian Warp :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-warp</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Warp fills the void between client-side and server-side testing.

This extension allow you to write client-side test which asserts server-side logic.
=:

- <i class="icon-star"></i> Arquillian Warp JSF :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-warp-jsf</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Warp JSF adds additional Warp capabilities to JSF requests.
=:

- <i class="icon-star"></i> Arquillian Transaction JTA :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-transaction-jta</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Transaction Extension allow you to influence the Transactional behavior of the Test via annotations.
=:

- <i class="icon-star"></i> Arquillian Persistence :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-persistence</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Persistence Extension was created to help you writing tests where persistence layer is involved. Inspired by great framework called Unitils, it brings bunch of annotations to help you deal with the underlying data storage.
=:

- <i class="icon-star"></i> Arquillian Spring :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-spring</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. 
=:

- <i class="icon-star"></i> Arquillian Spring Transaction :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-spring-transaction</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. 
=:

- <i class="icon-star"></i> Arquillian Spring Persistence :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-spring-persistence</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. 
=:

- <i class="icon-star"></i> Arquillian Spring Warp :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-spring-warp</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. 
=:

- <i class="icon-star"></i> Arquillian Byteman :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-byteman</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Byteman integration for the Arquillian Project

Mocking 2.0, Runtime bytecode manipulation in Integration tests.
=:

- <i class="icon-star"></i> Arquillian Jacoco :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-jacoco</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Automagic remote in-container code coverage
=:

- <i class="icon-star"></i> Arquillian Recorder :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-recorder</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Recorder project brings neat reports of your Arquillian tests.
=:

- <i class="icon-star"></i> Arquillian Recorder API :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-recorder-api</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Recorder API is a module with only the API and SPI dependencies for Recorder. This allow you to depend on the API in test/compile scope and optionally activate the complete Arquillian Reporter module in a different profile when you want the reports generated.

See Arquillian Recorder above. 
=:

- <i class="icon-star"></i> Arquillian REST RestEasy 2.x :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-resteasy2</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian REST Client Extension allows you to test your RESTful applications on the client side.

Sometimes you need to test your REST app as a black box. You know the interface (the contract), you have some input and know what results you expect. For that purpose Arquillian REST Client Extension is your friend.
=:

- <i class="icon-star"></i> Arquillian REST RestEasy 3.x :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-resteasy3</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian REST Client Extension allows you to test your RESTful applications on the client side.

Sometimes you need to test your REST app as a black box. You know the interface (the contract), you have some input and know what results you expect. For that purpose Arquillian REST Client Extension is your friend.
=:

- <i class="icon-star"></i> Arquillian REST JAXRS 2.0 :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-jaxrs2</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian REST Client Extension allows you to test your RESTful applications on the client side.

Sometimes you need to test your REST app as a black box. You know the interface (the contract), you have some input and know what results you expect. For that purpose Arquillian REST Client Extension is your friend.
=:

- <i class="icon-star"></i> Arquillian REST Jersey :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-jersey</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian REST Client Extension allows you to test your RESTful applications on the client side.

Sometimes you need to test your REST app as a black box. You know the interface (the contract), you have some input and know what results you expect. For that purpose Arquillian REST Client Extension is your friend.
=:

- <i class="icon-star"></i> Arquillian REST Warp RestEasy :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-warp-resteasy</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Warp REST Extension allows you to test your RESTful applications on the server side.

This extension brings tools for intercepting the state of the executing service and exercise it through in container tests that can be executed directly before or after the service is being invoked.
=:

- <i class="icon-star"></i> Arquillian REST Warp Jersey :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-warp-jersey</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Warp REST Extension allows you to test your RESTful applications on the server side.

This extension brings tools for intercepting the state of the executing service and exercise it through in container tests that can be executed directly before or after the service is being invoked.
=:

- <i class="icon-star"></i> Arquillian REST Warp JAXRS 2.0 :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-warp-jaxrs2</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Warp REST Extension allows you to test your RESTful applications on the server side.

This extension brings tools for intercepting the state of the executing service and exercise it through in container tests that can be executed directly before or after the service is being invoked.
=:

- <i class="icon-star"></i> Arquillian REST Warp CXF :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-warp-cxf</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Warp REST Extension allows you to test your RESTful applications on the server side.

This extension brings tools for intercepting the state of the executing service and exercise it through in container tests that can be executed directly before or after the service is being invoked.
=:

- <i class="icon-star"></i> Arquillian Cube Docker :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-cube-docker</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Cube is an Arquillian extension that can be used to manager Docker containers from Arquillian.

With this extension you can start a Docker container with a server installed, deploy the required deployable file within it and execute Arquillian tests.

The key point here is that if Docker is used as deployable platform in production, your tests are executed in a the same container as it will be in production, so your tests are even more real than before.

But it also lets you start a container with every required service like database, mail server, …​ and instead of stubbing or using fake objects your tests can use real servers.
=:

- <i class="icon-star"></i> Arquillian Cube Containerless :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-cube-containerless</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Cube is an Arquillian extension that can be used to manager Docker containers from Arquillian.

The Containerless container integrates Docker images as normal Arquillian Containers without the need for any Java EE style server as a target.
=:

- <i class="icon-star"></i> Arquillian Governor JIRA :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-governor-jira</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Governor Extension and the implementations which use its API give you the possibility to programmatically choose what test methods of your Arquillian tests are going to be executed and what are going to be skipped by putting your custom annotations on the test methods.
=:

- <i class="icon-star"></i> Arquillian Governor GitHub :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-governor-github</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Governor Extension and the implementations which use its API give you the possibility to programmatically choose what test methods of your Arquillian tests are going to be executed and what are going to be skipped by putting your custom annotations on the test methods.
=:

- <i class="icon-star"></i> Arquillian Governor Skipper :=
bc(prettify).. 
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-governor-skipper</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian Governor Extension and the implementations which use its API give you the possibility to programmatically choose what test methods of your Arquillian tests are going to be executed and what are going to be skipped by putting your custom annotations on the test methods. 
=:

- <i class="icon-star"></i> Arquillian Spacelift :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-spacelift</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Arquillian process and package manager. Makes executing an external process or fetching platform dependent dependencies an easier job.
=:

- <i class="icon-star"></i> Arquillian Chameleon Container :=
bc(prettify).. <dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-chameleon</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>

p. Have you ever faced an issue that switching between container implementations isn’t that easy?

Testing against several containers (JBoss AS / JBoss EAP / WildFly) or even switching between different modes (Managed, Remote, Embedded) may result in bloated pom.xml.

Chameleon Containers are able to quickly adopt to your needs without too much hassle. 
=:

For more information please see the "documentation":https://github.com/arquillian/arquillian-universe-bom#arquillian-universe-unified-dependencies.