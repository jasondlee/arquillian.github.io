---
date: 2017-12-08
author: lordofthejars
---

p. We are deligthed to announce a new version of Arquillian Cube 1.10.0 with new features and bug fixes.

p. In this new version of Arquillian Cube there has been major improvements in OpenShift:"https://www.openshift.com/" integration.

h3. What's new

p. <i class="icon-star"></i> **[OpenShift] Add support for role binding and add roles to service accounts**

p. If you are using OpenShift:"https://www.openshift.com/" you can use @@AddRoleToServiceAccount@ and @@RoleBinding@ annotations to bind roles for a test.

p. <i class="icon-star"></i> **[OpenShift] Add support for setting templates with annotation**

p. If you are using OpenShift:"https://www.openshift.com/", you can set OpenShift templates location using an annotation (@@Template@) instead of a configuration parameter.

bc(prettify).. @Template(url = "https://gist.githubusercontent.com/lordofthejars/8781cacd4000a516695ad6c55b5815b3/raw/5151aeef0f5dd8823e2c581c3b7452f04a76af59/hello-template.yaml",
          parameters = @TemplateParameter(name = "RESPONSE", value = "Hello from Arquillian Template"))
public class HelloWorldTemplateTest {}

p. @@Template@ accepts only any location in @URL@ form. It is important to note that @URL@ can contain references to system properties or environment variables by using @${systemproperty}@ in case of a system property or @${env.environmentvariable}@ in case of an environment variable.
You can add @:@ after attribute name to provide a default value.

p. You can see full example at "template project":https://github.com/arquillian/arquillian-cube/tree/master/openshift/ftest-template-standalone

p. <i class="icon-star"></i> **[OpenShift] Add support for creating OpenShift Resources with annotation**

p. If you are using OpenShift:"https://www.openshift.com/", you can set any OpenShift resource to be executed either before test class or before test method. Notice that after test class/test method execution these resources are going to be deleted.

p. To set OpenShift resources you need to use @@OpenShiftResource@ at class or method level.

bc(prettify).. @OpenShiftResource("classpath:hello-route.yaml")
public class HelloWorldOpenShiftResourcesTest {}

p. @@OpenShiftResource@ value attribute can either be:
* a link (https://www.github.com/alesj/template-testing/some.json)
* a test classpath resource (@classpath:some.json@)
* or plain content (@{"kind" : "Secret", ...}@)

p. You can see full example at "openshift resources project":https://github.com/arquillian/arquillian-cube/tree/master/openshift/ftest-openshift-resources-standalone

p. <i class="icon-star"></i> **[Docker/Kubernetes/OpenShift] Provides abstraction for executing CLI operations**

p. You can instantiate @CommandExecutor@ class to execute CLI operations directly from your test.
Usually, you use this class to execute commands directly from @kubectl@ or @oc@ tool.

bc(prettify).. private static CommandExecutor commandExecutor = new CommandExecutor();
final List<String> namespaces = commandExecutor.execCommand("kubectl get ns -o=name");

p. You can see full example at "command executor project":https://github.com/arquillian/arquillian-cube/tree/master/openshift/ftest-oc-proxy

p. <i class="icon-star"></i> **[OpenShift] Provides a way to skip readiness await**

p. Able to turn off readiness await to workaround Fabric8 Kubernetes Client issues such as https://github.com/fabric8io/kubernetes-client/issues/921

p. By default readiness await is always performed, but you can skip it by setting configuration parameter @wait.enabled@ to false in @arquillian.xml@.

p. <i class="icon-star"></i> **[Kubernetes/OpenShift] Namespace in annotation name**

p. Now you can enrich a test with an element of another namespace different fromfa
 the current one.

bc(prettify).. @ArquillianResource
@Named(value = "my-service", namespace = "my-predefined-namespace")
Service service;


p. <i class="icon-star"></i> **[OpenShift] Provides an OpenShift assistant to deploy resources programmatically**

p. Sometimes you need to decide when and what to deploy in OpenShift:"https://www.openshift.com/" cluster. Maybe you want to deploy something in one specific part of the test method and delete it in another part. For this reason a test can be enriched with @OpenShiftAssistant@ to execute operations in current OpenShift cluster namespace in any part of the test.

bc(prettify).. @ArquillianResource
OpenShiftAssistant openShiftAssistant;

openShiftAssistant.deployApplication("hello-world", "hello-route.json");

final Optional<URL> route = openShiftAssistant.getRoute();
openShiftAssistant.awaitUrl(route.get());

p. You can see full example at "OpenShift assistant project":https://github.com/arquillian/arquillian-cube/tree/master/openshift/ftest-openshift-assistant
