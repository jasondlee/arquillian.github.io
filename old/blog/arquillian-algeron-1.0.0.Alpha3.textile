---
date: 2016-11-03
author: lordofthejars
---

p(important). %*_Important note_*: This extension was called **Arquillian Pact** before version @1.0.0.Alpha5@, so you should use this name when pulling dependencies from Maven Central.%

p. Arquillian Pact is an extension for writing contract-driven tests which provides integration with "Pact":https://docs.pact.io/ framework.

h3. What's new

p. <i class="icon-star"></i> **Skipping the deployment**

p. In case of consumer driven contracts, there are two kinds of tests - consumer tests and provider tests. Usually in your CI environment you want to run provider tests against two different scenarios:

p. Against a master branch of provider to detect if provider team has already implemented all the functionalities defined in your contracts.

p. Against (pre)production. If you support deploying consumer independently of a provider, then you need to ensure that if you deploy new consumer with the new contracts to (pre)production everything will be still working and you haven't introduced any regressions.

p. In both cases, the test itself is exactly the same. There is only one slight difference in both cases which how you set up your test environments. In the first scenario, you want to deploy the latest provider code. One way of doing it is using Arquillian container control and @@Deployment@ method to create the package, start the container and deploy it. But in the latter case, when you want to run contract test against provider that is already deployed on (pre)production environment, you don’t need to deploy anything nor control the lifecycle of any container. For this reason we provided @skipDeployment@ flag.

p. @skipDeployment@ default value by default is set to @false@, which means that the test will behave as it usually does, but when it is set to @true@, Arquillian is going to ignore anything related to container lifecycle. To use this strategy your test needs to be defined as `@RunAsClient`. You can think of it as a dynamic way of converting an Arquillian container test into Arquillian standalone test.

p. Let's see an example:

bc(prettify).. @RunWith(Arquillian.class)
@Provider("test_provider")
@PactFolder("pacts")
@RunAsClient
public class MyServiceProviderTest {

    @Deployment(testable = false)
    public static WebArchive createDeployment() {
        return ShrinkWrap.create(WebArchive.class).addClass(MyService.class);
    }

    @ArquillianResource
    @Environment("myservice.url")
    URL webapp;

    @ArquillianResource
    Target target;

    @Test
    public void should_provide_valid_answers() {
        target.testInteraction(webapp);
    }

}

p. Given previous test, if @skipDeployment@ is @false@, this test will behave like:

# Start chosen application server (Wildfly, TomEE, Tomcat, …​)
# Package and Deploy MyService
# Enrich webapp URL with the one provided by application server. @@Environment@ reference is ignored.
# Executes contract test against deployed application.
# Undeploy and stop everything.

p. But if you set @skipDeployment@ to @true@, lifecycle is slightly different:

# Enrich webapp URL with Java system property or environment variable named @myservice.url@ set in @@Environment@.
# Executes contract tests against URL provided by @Environment.

p. There is no additional "behind the scenes" Arquillian magic involved. Notice that with a simple attribute you can enable/disable how Arquillian behaves regarding the deployment lifecycle, and how you can reuse same test (DRY) for different scenarios.

p. You can read more about this feature in "Pact documentation":https://github.com/arquillian/arquillian-algeron/tree/1.0.0.Alpha3#skip-deployment

p. <i class="icon-star"></i> **Provider states with parameters introduced in Version 3 of Pact Spec**

p. You can also use parameters for defining __pact states__. This feature is introduced in version 3 of pact contract files.

In consumer part you can add states with parameters doing:

bc(prettify).. Map<String, Object> stateParams = new HashMap<>();
stateParams.put("name", "Alexandra");

return builder
        .given("test state", stateParams)
        .uponReceiving("ConsumerTest test interaction")
        .path("/")
        .method("GET")
        .willRespondWith()
        .status(200)
        .headers(header)
        .body("{\"responsetest\": true, \"name\": \"harry\"}")
        .toFragment();

p. Notice that you are using @given@ passing state name and parameters.

p. Then in provider side:

bc(prettify)..  @State("test state")
public void testStateMethod(Map<String, Object> params) {
    assertThat(params).containsEntry("name", "Alexandra");
}

p. <i class="icon-star"></i> **Pact Publisher mechanism**

p. Arquillian Pact also offers additional ways to of publishing "pact" contract files comparing to what Pact itself is providing. With Pact you usually need to relay on the build tool to publish "pact" files. Pact offers a Maven and Gradle plugin for publishing contracts to Pact Broker, but if you want to use Git repository or sharing contracts through an arbitrary folder, then you’ll need to start hacking the build tool which is not always as easy as it should be :)

p. In Arquillian Pact we have defined a Pact Publishing SPI so you can implement your own publisher. We currently support three different publishers - Folder, URL[POST method] and Git.

p. For example to use it with Folder Publisher, @arquillian.xml@ might look like:

bc(prettify).. <?xml version="1.0"?>
<arquillian xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns="http://jboss.org/schema/arquillian"
            xsi:schemaLocation="http://jboss.org/schema/arquillian
    http://jboss.org/schema/arquillian/arquillian_1_0.xsd">

    <extension qualifier="pact-consumer">
        <property name="pactPublishConfiguration">
            provider: folder
            outputFolder: /mypacts
        </property>
    </extension>

</arquillian>

p. With this configuration and setting @publishContracts@ to true, Arquillian Pact copies generated contracts to @outputFolder@.

p. It is important to note that by default @publishContracts@ configuration attribute is @false@. This means that when you run any consumer contract test, contracts are not published. @publishContracts@ configuration attribute should be only set to @true@ if and only if you are publishing a new version of a consumer, and this will be done by your CI/CD environment.

p. You can set @outputFolder@ value using Java system property.

p. You can read more about this feature in "Pact documentation":https://github.com/arquillian/arquillian-algeron/tree/1.0.0.Alpha3#pact-publisher

h3. Bug fixing

p. <i class="icon-star"></i> **GitPactLoader - password field as passphrase bug**

@GitPactLoader@ was using password field as passphrase which is totally wrong since passphrase of a private key is not a password. "issue-31":https://github.com/arquillian/arquillian-algeron/issues/31

p. <i class="icon-star"></i> **GitPactLoader - always using default key**

@GitPactLoader@ was always using default key instead of the one in current user home directory.
